'''
ICEQ (2025) - –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

–û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
- Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
- –ú–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ

–ó–∞–ø—É—Å–∫:
    >>> python app.py
'''

import os
import json
import csv
import io
from datetime import datetime

from flask import Flask, render_template, request, jsonify, send_file

try:
    from generation import QuestionsGenerator
except ImportError:
    # –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ src
    import sys
    import os
    sys.path.append(os.path.dirname(os.path.abspath(__file__)))
    from generation import QuestionsGenerator

# –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–≥—Ä—É–∑–∫—É .env Flask-–æ–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
os.environ.setdefault('FLASK_SKIP_DOTENV', '1')

app = Flask(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ DeepSeek –∏ Qwen API)
question_generator = QuestionsGenerator(init_llms=['deepseek'])

# –°—Ç–∞—Ç—É—Å –ø—Ä–µ–º–∏—É–º —Ä–µ–∂–∏–º–∞
premium_active = False
premium_features = {
    'max_questions': 100,  # –æ–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - –¥–æ 10
    'max_file_size': 50 * 1024 * 1024,  # 50 –ú–ë –¥–ª—è –ø—Ä–µ–º–∏—É–º, 50 –ö–ë –¥–ª—è –æ–±—ã—á–Ω—ã—Ö
    'daily_tests_limit': 50,  # 50 —Ç–µ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å –¥–ª—è –ø—Ä–µ–º–∏—É–º, 5 –¥–ª—è –æ–±—ã—á–Ω—ã—Ö
    'models': ['deepseek', 'qwen', 'iceq'],  # –æ–±—ã—á–Ω—ã–µ - —Ç–æ–ª—å–∫–æ deepseek
    'export_formats': ['json', 'csv', 'txt', 'docx', 'pdf'],  # –æ–±—ã—á–Ω—ã–µ - —Ç–æ–ª—å–∫–æ json, txt
    'priority_processing': True,  # –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    'advanced_analytics': True,  # —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    'custom_prompts': True,  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–æ–º–ø—Ç—ã
    'api_access': True  # –¥–æ—Å—Ç—É–ø –∫ API
}

@app.route('/')
def index():
    """
    –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    
    Returns:
        str: HTML-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
    """
    return render_template('pages/home.html')

@app.route('/create')
def create_test():
    """
    –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞
    
    Returns:
        str: HTML-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞
    """
    return render_template('pages/create.html')

@app.route('/take')
def take_test():
    """
    –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
    
    Returns:
        str: HTML-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
    """
    return render_template('pages/take.html')

@app.route('/preview')
def preview_test():
    """
    –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
    
    Returns:
        str: HTML-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ—Å—Ç–∞
    """
    return render_template('pages/preview.html')

@app.route('/premium/toggle', methods=['POST'])
def toggle_premium():
    """
    –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–µ–º–∏—É–º —Ä–µ–∂–∏–º–∞
    
    Returns:
        JSON: –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–º–∏—É–º —Ä–µ–∂–∏–º–∞
    """
    global premium_active
    premium_active = not premium_active
    
    return jsonify({
        'status': 'success',
        'premium_active': premium_active,
        'message': '–ü—Ä–µ–º–∏—É–º —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω!' if premium_active else '–ü—Ä–µ–º–∏—É–º —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω!'
    })

@app.route('/premium/status', methods=['GET'])
def premium_status():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–µ–º–∏—É–º —Ä–µ–∂–∏–º–∞
    
    Returns:
        JSON: —Å—Ç–∞—Ç—É—Å –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    """
    return jsonify({
        'premium_active': premium_active,
        'features': premium_features if premium_active else {
            'max_questions': 10,
            'max_file_size': 50 * 1024,  # 50 –ö–ë
            'daily_tests_limit': 5,  # 5 —Ç–µ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö
            'models': ['deepseek'],
            'export_formats': ['txt'],
            'priority_processing': False,
            'advanced_analytics': False,
            'custom_prompts': False,
            'api_access': False
        }
    })

@app.route('/estimate-time', methods=['POST'])
def estimate_time():
    """
    –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
    
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç POST –∑–∞–ø—Ä–æ—Å —Å JSON —Å–æ–¥–µ—Ä–∂–∞—â–∏–º:
        - text: —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        - questionNumber: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
    
    Returns:
        JSON: —Å—Ç–∞—Ç—É—Å –∏ –æ—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    """
    try:
        # Get data from request
        data = request.get_json()
        text_content = data.get('text', '')
        questions_num = int(data.get('questionNumber', 10))
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ü–µ–Ω–∫—É –≤—Ä–µ–º–µ–Ω–∏
        time_estimate = question_generator.estimate_generation_time(text_content, questions_num, 'iceq')
        
        return jsonify({
            'status': 'success',
            'estimate': time_estimate
        })
    except Exception as e:
        return jsonify({
            'status': 'error',
            'message': str(e)
        }), 500

@app.route('/generate', methods=['POST'])
def generate_questions():
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ç–µ–∫—Å—Ç—É
    
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç POST –∑–∞–ø—Ä–æ—Å —Å JSON —Å–æ–¥–µ—Ä–∂–∞—â–∏–º:
        - text: —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
        - questionNumber: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
        - model: –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ('deepseek', 'qwen', 'iceq')
    
    Returns:
        JSON: —Å—Ç–∞—Ç—É—Å –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        data = request.get_json()
        text_content = data.get('text', '')
        questions_num = int(data.get('questionNumber', 10))
        model = data.get('model', 'deepseek')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        max_questions = premium_features['max_questions'] if premium_active else 10
        available_models = premium_features['models'] if premium_active else ['deepseek']
        
        if questions_num > max_questions:
            return jsonify({
                'status': 'error',
                'message': f'–ú–∞–∫—Å–∏–º—É–º {max_questions} –≤–æ–ø—Ä–æ—Å–æ–≤. –í–∫–ª—é—á–∏—Ç–µ –ü—Ä–µ–º–∏—É–º –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞!'
            }), 400
            
        if model not in available_models:
            return jsonify({
                'status': 'error',
                'message': f'–ú–æ–¥–µ–ª—å {model} –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ü—Ä–µ–º–∏—É–º —Ä–µ–∂–∏–º–µ!'
            }), 400

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤–æ–ø—Ä–æ—Å–æ–≤
        formatted_questions = question_generator.generate(text_content, questions_num, llm=model)

        # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–¢–õ–ê–î–ö–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
        print(f"üîç === –û–¢–õ–ê–î–ö–ê –í APP.PY ===")
        print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞: {type(formatted_questions)}")
        print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(formatted_questions) if formatted_questions else 0}")
        if formatted_questions:
            print(f"üîç –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å: {formatted_questions[0]}")
        else:
            print("‚ùå –ö–†–ò–¢–ò–ß–ù–û: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫!")
        print("=== –ö–û–ù–ï–¶ –û–¢–õ–ê–î–ö–ò –í APP.PY ===")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
        return jsonify({
            'status': 'success',
            'questions': formatted_questions
        })
    except Exception as e:
        return jsonify({
            'status': 'error',
            'message': str(e)
        }), 500

@app.route('/export', methods=['POST'])
def export_test():
    """
    –≠–∫—Å–ø–æ—Ä—Ç —Ç–µ—Å—Ç–∞ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
    
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç JSON —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:
        - format: —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ ('json', 'csv', 'txt')
        - questions: —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
        - userAnswers: –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    
    Returns:
        file: —Ñ–∞–π–ª —Å —Ç–µ—Å—Ç–æ–º –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    """
    try:
        data = request.json
        export_format = data.get('format', 'json')
        questions = data.get('questions', [])
        user_answers = data.get('userAnswers', [])

        if export_format == 'json':
            return export_json(questions, user_answers)
        elif export_format == 'csv':
            return export_csv(questions, user_answers)
        elif export_format == 'txt':
            return export_txt(questions, user_answers)
        else:
            return jsonify({'status': 'error', 'message': '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç'}), 400
    except Exception as e:
        return jsonify({
            'status': 'error',
            'message': str(e)
        }), 500

@app.route('/test/submit', methods=['POST'])
def submit_test():
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–∞
    
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç JSON —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:
        - questions: —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
        - answers: —Å–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Returns:
        JSON: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞
    """
    try:
        data = request.get_json()
        questions = data.get('questions', [])
        user_answers = data.get('answers', [])
        
        if not questions or not user_answers:
            return jsonify({
                'status': 'error',
                'message': '–ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –æ—Ç–≤–µ—Ç—ã'
            }), 400
            
        # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        total_questions = len(questions)
        correct_answers = 0
        results = []
        
        for i, (question, answer) in enumerate(zip(questions, user_answers)):
            correct = next((a['answer'] for a in question['answers'] if a['is_correct']), None)
            is_correct = answer == correct
            
            if is_correct:
                correct_answers += 1
                
            results.append({
                'question_index': i,
                'is_correct': is_correct,
                'user_answer': answer,
                'correct_answer': correct,
                'explanation': question.get('explanation', '')
            })
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        return jsonify({
            'status': 'success',
            'total_questions': total_questions,
            'correct_answers': correct_answers,
            'score_percentage': round((correct_answers / total_questions) * 100, 1),
            'results': results
        })
        
    except Exception as e:
        return jsonify({
            'status': 'error',
            'message': str(e)
        }), 500

@app.route('/test/save', methods=['POST'])
def save_test():
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç JSON —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:
        - title: –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞
        - questions: —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
        - settings: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∞
    
    Returns:
        JSON: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
    """
    try:
        data = request.get_json()
        title = data.get('title', '–ù–æ–≤—ã–π —Ç–µ—Å—Ç')
        questions = data.get('questions', [])
        settings = data.get('settings', {})
        
        if not questions:
            return jsonify({
                'status': 'error',
                'message': '–ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è'
            }), 400
            
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–µ—Å—Ç–∞
        test_id = datetime.now().strftime('%Y%m%d%H%M%S')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã —Ä–∞–±–æ—Ç–∞ —Å –ë–î)
        test_data = {
            'id': test_id,
            'title': title,
            'questions': questions,
            'settings': settings,
            'created_at': datetime.now().isoformat()
        }
        
        return jsonify({
            'status': 'success',
            'test_id': test_id,
            'message': '–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω'
        })
        
    except Exception as e:
        return jsonify({
            'status': 'error',
            'message': str(e)
        }), 500

@app.route('/test/<test_id>', methods=['GET'])
def get_test(test_id):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
    
    Args:
        test_id (str): –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–µ—Å—Ç–∞
    
    Returns:
        JSON: –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞
    """
    try:
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã —Ä–∞–±–æ—Ç–∞ —Å –ë–î
        # –°–µ–π—á–∞—Å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        return jsonify({
            'status': 'error',
            'message': '–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
        }), 404
        
    except Exception as e:
        return jsonify({
            'status': 'error',
            'message': str(e)
        }), 500

def export_json(questions, user_answers=None):
    """
    –≠–∫—Å–ø–æ—Ä—Ç —Ç–µ—Å—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
    
    Args:
        questions (list): —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ —Ç–µ—Å—Ç–∞
        user_answers (list, optional): –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Returns:
        Response: —Ñ–∞–π–ª JSON –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    """
    test_data = {
        'title': 'ICEQ –¢–µ—Å—Ç',
        'dateCreated': datetime.now().isoformat(),
        'questions': questions
    }

    if user_answers:
        test_data['userAnswers'] = user_answers

    json_data = json.dumps(test_data, ensure_ascii=False, indent=2)

    # –°–æ–∑–¥–∞–µ–º –±–∞–π—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –∏–∑ —Å—Ç—Ä–æ–∫–∏ JSON
    json_bytes = json_data.encode('utf-8')

    # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
    filename = f'ICEQ-Test_{datetime.now().strftime("%Y-%m-%d")}.json'

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    return send_file(
        io.BytesIO(json_bytes),
        as_attachment=True,
        download_name=filename,
        mimetype='application/json'
    )


def export_csv(questions, user_answers=None):
    """
    –≠–∫—Å–ø–æ—Ä—Ç —Ç–µ—Å—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV
    
    Args:
        questions (list): —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ —Ç–µ—Å—Ç–∞
        user_answers (list, optional): –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Returns:
        Response: —Ñ–∞–π–ª CSV –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    """
    output = io.StringIO()
    writer = csv.writer(output)

    if user_answers and len(user_answers) == len(questions):
        # –≠–∫—Å–ø–æ—Ä—Ç —Å –æ—Ç–≤–µ—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        writer.writerow(['–í–æ–ø—Ä–æ—Å', '–í–∞—à –æ—Ç–≤–µ—Ç', '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç', '–°—Ç–∞—Ç—É—Å', '–û–±—ä—è—Å–Ω–µ–Ω–∏–µ'])

        for i, q in enumerate(questions):
            correct_answer = next((a['answer'] for a in q['answers'] if a['is_correct']), '')
            user_answer = user_answers[i] if i < len(user_answers) else ''

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
            if user_answer is None:
                status = '–ü—Ä–æ–ø—É—â–µ–Ω'
            elif user_answer == correct_answer:
                status = '–ü—Ä–∞–≤–∏–ª—å–Ω–æ'
            else:
                status = '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ'

            writer.writerow([
                q['question'],
                user_answer or '–ù–µ –æ—Ç–≤–µ—á–µ–Ω',
                correct_answer,
                status,
                q.get('explanation', '')
            ])
    else:
        # –≠–∫—Å–ø–æ—Ä—Ç —Ç–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤
        writer.writerow(['–í–æ–ø—Ä–æ—Å', '–í–∞—Ä–∏–∞–Ω—Ç 1', '–í–∞—Ä–∏–∞–Ω—Ç 2', '–í–∞—Ä–∏–∞–Ω—Ç 3', '–í–∞—Ä–∏–∞–Ω—Ç 4', '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç', '–û–±—ä—è—Å–Ω–µ–Ω–∏–µ'])

        for q in questions:
            answers = q.get('answers', [])
            correct_answer = next((a['answer'] for a in answers if a['is_correct']), '')

            row = [q['question']]
            for i in range(4):
                if i < len(answers):
                    row.append(answers[i]['answer'])
                else:
                    row.append('')

            row.extend([correct_answer, q.get('explanation', '')])
            writer.writerow(row)

    csv_content = output.getvalue()
    output.close()

    # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
    filename = f'ICEQ-Test_{datetime.now().strftime("%Y-%m-%d")}.csv'

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    return send_file(
        io.BytesIO(csv_content.encode('utf-8-sig')),  # BOM –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Excel
        as_attachment=True,
        download_name=filename,
        mimetype='text/csv'
    )


def export_txt(questions, user_answers=None):
    """
    –≠–∫—Å–ø–æ—Ä—Ç —Ç–µ—Å—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
    
    Args:
        questions (list): —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ —Ç–µ—Å—Ç–∞
        user_answers (list, optional): –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Returns:
        Response: —Ñ–∞–π–ª TXT –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    """
    content = f"ICEQ –¢–µ—Å—Ç - {datetime.now().strftime('%d.%m.%Y')}\n"
    content += "=" * 50 + "\n\n"

    for i, q in enumerate(questions, 1):
        content += f"–í–æ–ø—Ä–æ—Å {i}: {q['question']}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        for j, answer in enumerate(q.get('answers', []), 1):
            marker = "‚úì" if answer['is_correct'] else " "
            content += f"  {j}) [{marker}] {answer['answer']}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—Å—Ç—å
        if user_answers and i-1 < len(user_answers):
            user_answer = user_answers[i-1]
            content += f"\n–í–∞—à –æ—Ç–≤–µ—Ç: {user_answer or '–ù–µ –æ—Ç–≤–µ—á–µ–Ω'}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
        if q.get('explanation'):
            content += f"\n–û–±—ä—è—Å–Ω–µ–Ω–∏–µ: {q['explanation']}\n"

        content += "\n" + "-" * 40 + "\n\n"

    # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
    filename = f'ICEQ-Test_{datetime.now().strftime("%Y-%m-%d")}.txt'

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    return send_file(
        io.BytesIO(content.encode('utf-8')),
        as_attachment=True,
        download_name=filename,
        mimetype='text/plain'
    )


if __name__ == '__main__':
    app.run(debug=True, host='127.0.0.1', port=8080)
