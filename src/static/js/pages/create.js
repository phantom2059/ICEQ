/**
 * ICEQ (2025) - –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞
 */

// –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è API –µ—Å–ª–∏ window.iceqBase –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if (!window.iceqBase) {
    window.iceqBase = {
        fetchAPI: async (url) => {
            console.log('Mock API call to:', url);
            if (url === '/premium/status') {
                return { premium_active: false }; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–µ–∑ –ø—Ä–µ–º–∏—É–º–∞
            }
            return { status: 'success' };
        },
        showToast: (message, type = 'info') => {
            console.log(`[${type.toUpperCase()}] ${message}`);
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ DOM
            const existingToast = document.querySelector('.temp-toast');
            if (existingToast) existingToast.remove();
            
            const toast = document.createElement('div');
            toast.className = 'temp-toast';
            toast.style.cssText = `
                position: fixed; 
                top: 20px; 
                right: 20px; 
                background: ${type === 'error' ? '#f44336' : type === 'warning' ? '#ff9800' : type === 'success' ? '#4caf50' : '#2196f3'}; 
                color: white; 
                padding: 12px 20px; 
                border-radius: 8px; 
                z-index: 10000;
                box-shadow: 0 4px 12px rgba(0,0,0,0.3);
                max-width: 300px;
            `;
            toast.textContent = message;
            document.body.appendChild(toast);
            
            setTimeout(() => toast.remove(), 3000);
        }
    };
    console.log('üîß Mock iceqBase API created');
}

class CreateTestPage {
    constructor() {
        console.log('üèóÔ∏è [INIT] –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ CreateTestPage...');
        
        this.sourceText = '';
        this.isPremium = false;
        this.isGenerating = false;
        this.maxQuestions = 10;
        this.selectedModel = 'iceq'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ICEQ
        
        console.log('‚öôÔ∏è [INIT] –ù–∞—á–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', {
            sourceText: this.sourceText,
            isPremium: this.isPremium,
            isGenerating: this.isGenerating,
            maxQuestions: this.maxQuestions,
            selectedModel: this.selectedModel
        });
        
        this.init();
    }
    
    init() {
        console.log('üöÄ [INIT] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤...');
        
        console.log('üîç [INIT] –®–∞–≥ 1: –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ DOM');
        this.initElements();
        
        console.log('üéØ [INIT] –®–∞–≥ 2: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π');
        this.initEventListeners();
        
        console.log('üîç [INIT] –®–∞–≥ 3: –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–µ–º–∏—É–º–∞');
        this.loadPremiumStatus();
        
        console.log('‚úÖ [INIT] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }
    
    initElements() {
        console.log('üîç [INIT] –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ DOM...');
        
        // –≠–ª–µ–º–µ–Ω—Ç—ã –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
        this.textArea = document.getElementById('text-content');
        this.charCounter = document.getElementById('char-counter');
        this.fileInput = document.getElementById('file-upload');
        this.fileInfo = document.getElementById('file-info');
        
        // –≠–ª–µ–º–µ–Ω—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫
        this.questionsInput = document.getElementById('question-number');
        
        // –ö–Ω–æ–ø–∫–∏
        this.generateBtn = document.getElementById('generate-btn');
        
        // –ü–∞–Ω–µ–ª–∏
        this.estimationPanel = document.getElementById('estimation-panel');
        
        // –ó–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ –æ–∫–Ω–æ
        this.loadingOverlay = document.getElementById('loading-overlay');
        
        // –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        console.log('üìä [INIT] –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', {
            textArea: { found: !!this.textArea, id: 'text-content' },
            charCounter: { found: !!this.charCounter, id: 'char-counter' },
            fileInput: { found: !!this.fileInput, id: 'file-upload' },
            fileInfo: { found: !!this.fileInfo, id: 'file-info' },
            questionsInput: { found: !!this.questionsInput, id: 'question-number' },
            generateBtn: { found: !!this.generateBtn, id: 'generate-btn' },
            estimationPanel: { found: !!this.estimationPanel, id: 'estimation-panel' },
            loadingOverlay: { found: !!this.loadingOverlay, id: 'loading-overlay' }
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        const criticalElements = [
            { name: 'textArea', element: this.textArea },
            { name: 'generateBtn', element: this.generateBtn },
            { name: 'questionsInput', element: this.questionsInput }
        ];
        
        criticalElements.forEach(({ name, element }) => {
            if (!element) {
                console.error(`‚ùå [INIT] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –≠–ª–µ–º–µ–Ω—Ç ${name} –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
            } else {
                console.log(`‚úÖ [INIT] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç ${name} –Ω–∞–π–¥–µ–Ω`);
            }
        });
    }
    
    initEventListeners() {
        console.log('üéØ [EVENT] –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π...');
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–∞
        console.log('üìù [EVENT] –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ç–µ–∫—Å—Ç–∞...');
        if (this.textArea) {
            this.textArea.addEventListener('input', () => this.handleTextInput());
            console.log('‚úÖ [EVENT] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        } else {
            console.log('‚ùå [EVENT] textArea –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞');
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
        console.log('üìÅ [EVENT] –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ñ–∞–π–ª–æ–≤...');
        const fileUpload = document.getElementById('file-upload');
        if (fileUpload) {
            fileUpload.addEventListener('change', (e) => this.handleFileUpload(e));
            console.log('‚úÖ [EVENT] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        } else {
            console.log('‚ùå [EVENT] fileUpload –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ drag&drop
        const dropArea = document.getElementById('drop-area');
        if (dropArea) {
            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                dropArea.addEventListener(eventName, this.preventDefaults, false);
                document.body.addEventListener(eventName, this.preventDefaults, false);
            });

            ['dragenter', 'dragover'].forEach(eventName => {
                dropArea.addEventListener(eventName, () => dropArea.classList.add('dragover'), false);
            });

            ['dragleave', 'drop'].forEach(eventName => {
                dropArea.addEventListener(eventName, () => dropArea.classList.remove('dragover'), false);
            });

            dropArea.addEventListener('drop', (e) => this.handleDrop(e), false);
            console.log('‚úÖ [EVENT] –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ drag&drop —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
        } else {
            console.log('‚ùå [EVENT] dropArea –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        const fileRemove = document.getElementById('file-remove');
        if (fileRemove) {
            fileRemove.addEventListener('click', () => this.removeFile());
            console.log('‚úÖ [EVENT] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        } else {
            console.log('‚ùå [EVENT] fileRemove –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
        console.log('üî¢ [EVENT] –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤...');
        const decreaseBtn = document.getElementById('decrease-questions');
        const increaseBtn = document.getElementById('increase-questions');
        
        if (decreaseBtn) {
            decreaseBtn.addEventListener('click', () => this.decreaseQuestions());
            console.log('‚úÖ [EVENT] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–º–µ–Ω—å—à–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        } else {
            console.log('‚ùå [EVENT] decreaseBtn –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        if (increaseBtn) {
            increaseBtn.addEventListener('click', () => this.increaseQuestions());
            console.log('‚úÖ [EVENT] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        } else {
            console.log('‚ùå [EVENT] increaseBtn –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        if (this.questionsInput) {
            this.questionsInput.addEventListener('change', () => this.validateQuestionsNumber());
            console.log('‚úÖ [EVENT] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        } else {
            console.log('‚ùå [EVENT] questionsInput –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ª–∞–π–¥–µ—Ä–∞
        const slider = document.getElementById('question-slider');
        if (slider) {
            slider.addEventListener('input', (e) => {
                this.questionsInput.value = e.target.value;
                this.validateQuestionsNumber();
            });
            console.log('‚úÖ [EVENT] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ª–∞–π–¥–µ—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        } else {
            console.log('‚ùå [EVENT] slider –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–∫–ª–∞–¥–æ–∫
        console.log('üìã [EVENT] –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤–∫–ª–∞–¥–æ–∫...');
        const tabBtns = document.querySelectorAll('.tab-btn');
        if (tabBtns.length > 0) {
            tabBtns.forEach(btn => {
                btn.addEventListener('click', () => this.switchTab(btn.dataset.tab));
            });
            console.log(`‚úÖ [EVENT] –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–∫–ª–∞–¥–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã (${tabBtns.length} —à—Ç.)`);
        } else {
            console.log('‚ùå [EVENT] –ö–Ω–æ–ø–∫–∏ –≤–∫–ª–∞–¥–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
        console.log('üéØ [EVENT] –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π...');
        if (this.generateBtn) {
            this.generateBtn.addEventListener('click', () => this.startGeneration());
            console.log('‚úÖ [EVENT] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        } else {
            console.log('‚ùå [EVENT] generateBtn –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
        console.log('ü§ñ [EVENT] –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–æ–¥–µ–ª–µ–π...');
        const modelOptions = document.querySelectorAll('.model-option');
        if (modelOptions.length > 0) {
            modelOptions.forEach(option => {
                option.addEventListener('click', () => this.selectModel(option.dataset.model));
            });
            console.log(`‚úÖ [EVENT] –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–¥–µ–ª–µ–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã (${modelOptions.length} —à—Ç.)`);
        } else {
            console.log('‚ùå [EVENT] –û–ø—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
        
        console.log('‚úÖ [EVENT] –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
    }
    
    async loadPremiumStatus() {
        console.log('üîç [PREMIUM] –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–µ–º–∏—É–º–∞...');
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
            console.log('üîç [PREMIUM] –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API...');
            if (!window.iceqBase || !window.iceqBase.fetchAPI) {
                throw new Error('API –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
            }
            console.log('‚úÖ [PREMIUM] API –¥–æ—Å—Ç—É–ø–µ–Ω');
            
            console.log('üì° [PREMIUM] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');
            const response = await window.iceqBase.fetchAPI('/premium/status');
            console.log('üì• [PREMIUM] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response);
            
            this.isPremium = response.premium_active;
            this.maxQuestions = this.isPremium ? 100 : 10; // –ë–ï–ó –ü–†–ï–ú–ò–£–ú–ê: 5-10, –° –ü–†–ï–ú–ò–£–ú–û–ú: 5-100
            
            console.log('‚úÖ [PREMIUM] –°—Ç–∞—Ç—É—Å –ø—Ä–µ–º–∏—É–º–∞ –∑–∞–≥—Ä—É–∂–µ–Ω:', {
                isPremium: this.isPremium,
                maxQuestions: this.maxQuestions
            });
            
        } catch (error) {
            console.error('‚ùå [PREMIUM] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
            console.error('‚ùå [PREMIUM] Stack trace:', error.stack);
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
            this.isPremium = false;
            this.maxQuestions = 10;
            console.log('üîÑ [PREMIUM] –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ fallback —Å—Ç–∞—Ç—É—Å–∞:', {
                isPremium: this.isPremium,
                maxQuestions: this.maxQuestions
            });
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
        console.log('üîÑ [PREMIUM] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI...');
        this.updateUI();
        console.log('‚úÖ [PREMIUM] UI –æ–±–Ω–æ–≤–ª–µ–Ω');
    }
    
    updateUI() {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–∞–π–¥–µ—Ä
        const slider = document.getElementById('question-slider');
        if (slider) {
            slider.max = this.maxQuestions;
            slider.min = 5;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏ —Å–ª–∞–π–¥–µ—Ä–∞
            const sliderLabels = document.querySelector('.slider-labels');
            if (sliderLabels) {
                sliderLabels.innerHTML = `<span>5</span><span>${this.maxQuestions}</span>`;
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–º–∏—Ç—ã —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ñ–∞–π–ª–æ–≤
        this.updateLimitsDisplay();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
        if (this.textArea) {
            this.handleTextInput();
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π
        this.updateModelAvailability();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∏ –ø–æ–ª–µ–π
        this.validateQuestionsNumber();
        this.updateButtonsState();
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        console.log('Status updated:', this.isPremium ? 'Premium' : 'Basic', `Max questions: ${this.maxQuestions}`);
    }
    
    updateLimitsDisplay() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –æ —Ä–∞–∑–º–µ—Ä–µ —Ñ–∞–π–ª–æ–≤
        const uploadHints = document.querySelector('.upload-hints p:last-child');
        if (uploadHints) {
            const maxFileSize = this.isPremium ? '50 –ú–ë' : '50 –ö–ë';
            const planText = this.isPremium ? 'Premium' : '–±–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω';
            uploadHints.innerHTML = `üí° –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${maxFileSize} (${planText})`;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –æ —Å–∏–º–≤–æ–ª–∞—Ö  
        const inputHints = document.querySelector('.input-hints');
        if (inputHints) {
            const maxChars = this.isPremium ? '1 000 000' : '10 000';
            const planText = this.isPremium ? 'Premium' : '–±–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω';
            inputHints.innerHTML = `üí° –õ–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤: ${maxChars} (${planText})`;
        }
    }
    
    updateModelAvailability() {
        document.querySelectorAll('.model-option').forEach(option => {
            const model = option.dataset.model;
            
            if (model === 'deepseek' || model === 'qwen') {
                if (!this.isPremium) {
                    option.classList.add('model-locked');
                    option.setAttribute('title', '–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Å Premium –ø–æ–¥–ø–∏—Å–∫–æ–π');
                } else {
                    option.classList.remove('model-locked');
                    option.removeAttribute('title');
                }
            }
        });
        
        // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ ICEQ
        const selectedModel = document.querySelector('.model-option.selected');
        if (selectedModel && selectedModel.classList.contains('model-locked')) {
            this.selectModel('iceq');
        }
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏, –≤—ã–±–∏—Ä–∞–µ–º ICEQ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if (!document.querySelector('.model-option.selected')) {
            this.selectModel('iceq');
        }
    }
    
    selectModel(modelName) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏
        const modelElement = document.querySelector(`[data-model="${modelName}"]`);
        if (modelElement && modelElement.classList.contains('model-locked')) {
            window.iceqBase.showToast('–≠—Ç–∞ –º–æ–¥–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å Premium –ø–æ–¥–ø–∏—Å–∫–æ–π', 'warning');
            return;
        }
        
        // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏—Ö –º–æ–¥–µ–ª–µ–π
        document.querySelectorAll('.model-option').forEach(option => {
            option.classList.remove('selected');
        });
        
        // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å
        if (modelElement) {
            modelElement.classList.add('selected');
            this.selectedModel = modelName;
        }
    }
    
    handleTextInput() {
        const text = this.textArea.value;
        const charCount = text.length;
        const maxChars = this.isPremium ? 1000000 : 10000; // –° –ü–†–ï–ú–ò–£–ú–û–ú: 1 –ú–ò–õ–õ–ò–û–ù —Å–∏–º–≤–æ–ª–æ–≤
        
        // –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç
        if (charCount > maxChars) {
            this.textArea.value = text.substring(0, maxChars);
            return this.handleTextInput();
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–∏–º–≤–æ–ª–æ–≤
        const currentSpan = this.charCounter.querySelector('.current');
        const maxSpan = this.charCounter.querySelector('.max');
        if (currentSpan) {
            currentSpan.textContent = charCount;
        }
        if (maxSpan) {
            maxSpan.textContent = maxChars.toLocaleString();
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º maxlength –∞—Ç—Ä–∏–±—É—Ç
        if (this.textArea) {
            this.textArea.setAttribute('maxlength', maxChars);
        }
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º/–¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
        this.updateButtonsState();
    }
    
    async pasteText() {
        try {
            const text = await navigator.clipboard.readText();
            this.textArea.value = text;
            this.handleTextInput();
        } catch (error) {
            window.iceqBase.showToast('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞', 'error');
        }
    }
    
    clearText() {
        this.textArea.value = '';
        this.handleTextInput();
        this.hideFileInfo();
    }
    
    preventDefaults(e) {
        e.preventDefault();
        e.stopPropagation();
    }
    
    handleDrop(e) {
        const files = e.dataTransfer.files;
        if (files.length > 0) {
            this.processFile(files[0]);
        }
    }
    
    processFile(file) {
        // –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π event –æ–±—ä–µ–∫—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å handleFileUpload
        const fakeEvent = {
            target: {
                files: [file]
            }
        };
        this.handleFileUpload(fakeEvent);
    }
    
    showFileInfo(fileName, fileSize) {
        const fileInfo = document.getElementById('file-info');
        const fileNameElem = document.getElementById('file-name');
        const fileSizeElem = document.getElementById('file-size');
        
        if (fileInfo && fileNameElem && fileSizeElem) {
            fileNameElem.textContent = fileName;
            fileSizeElem.textContent = this.formatFileSize(fileSize);
            fileInfo.style.display = 'block';
        }
    }
    
    hideFileInfo() {
        const fileInfo = document.getElementById('file-info');
        if (fileInfo) {
            fileInfo.style.display = 'none';
        }
    }
    
    removeFile() {
        // –û—á–∏—â–∞–µ–º input —Ñ–∞–π–ª–∞
        const fileInput = document.getElementById('file-upload');
        if (fileInput) {
            fileInput.value = '';
        }
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        this.hideFileInfo();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        this.updateButtonsState();
        
        window.iceqBase.showToast('–§–∞–π–ª —É–¥–∞–ª–µ–Ω', 'info');
    }
    
    formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', '–ö–ë', '–ú–ë', '–ì–ë'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }
    
    async handleFileUpload(event) {
        console.log('üìÅ [FILE] –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞...');
        
        const file = event.target.files[0];
        if (!file) {
            console.log('‚ùå [FILE] –§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω');
            return;
        }
        
        console.log('üìÑ [FILE] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ:', {
            name: file.name,
            size: file.size,
            type: file.type,
            sizeFormatted: this.formatFileSize(file.size)
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        const maxSize = this.isPremium ? 50 * 1024 * 1024 : 50 * 1024; // –° –ü–†–ï–ú–ò–£–ú–û–ú: 50 –ú–ë, –ë–ï–ó: 50 –ö–ë
        console.log('üìè [FILE] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞:', {
            fileSize: file.size,
            maxSize: maxSize,
            isPremium: this.isPremium,
            isWithinLimit: file.size <= maxSize
        });
        
        if (file.size > maxSize) {
            const maxSizeText = this.isPremium ? '50 –ú–ë' : '50 –ö–ë';
            console.log('‚ùå [FILE] –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π');
            window.iceqBase.showToast(`–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º—É–º: ${maxSizeText}`, 'error');
            return;
        }
        
        try {
            console.log('üîÑ [FILE] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞...');
            let text = '';
            
            if (file.type === 'text/plain') {
                console.log('üìù [FILE] –ß—Ç–µ–Ω–∏–µ TXT —Ñ–∞–π–ª–∞...');
                text = await file.text();
                console.log('‚úÖ [FILE] TXT —Ñ–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω, —Å–∏–º–≤–æ–ª–æ–≤:', text.length);
            } else if (file.type.includes('pdf')) {
                console.log('üìã [FILE] –ß—Ç–µ–Ω–∏–µ PDF —Ñ–∞–π–ª–∞...');
                // –ß—Ç–µ–Ω–∏–µ PDF
                const arrayBuffer = await file.arrayBuffer();
                console.log('üì¶ [FILE] PDF arrayBuffer –ø–æ–ª—É—á–µ–Ω, —Ä–∞–∑–º–µ—Ä:', arrayBuffer.byteLength);
                
                const pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;
                console.log('üìö [FILE] PDF –¥–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω, —Å—Ç—Ä–∞–Ω–∏—Ü:', pdf.numPages);
                
                for (let i = 1; i <= pdf.numPages; i++) {
                    console.log(`üìÑ [FILE] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${i}...`);
                    const page = await pdf.getPage(i);
                    const content = await page.getTextContent();
                    text += content.items.map(item => item.str).join(' ') + '\n';
                }
                console.log('‚úÖ [FILE] PDF —Ñ–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω, —Å–∏–º–≤–æ–ª–æ–≤:', text.length);
            } else if (file.type.includes('word')) {
                console.log('üìù [FILE] –ß—Ç–µ–Ω–∏–µ Word —Ñ–∞–π–ª–∞...');
                // –ß—Ç–µ–Ω–∏–µ Word
                const arrayBuffer = await file.arrayBuffer();
                console.log('üì¶ [FILE] Word arrayBuffer –ø–æ–ª—É—á–µ–Ω, —Ä–∞–∑–º–µ—Ä:', arrayBuffer.byteLength);
                
                const result = await mammoth.extractRawText({ arrayBuffer });
                text = result.value;
                console.log('‚úÖ [FILE] Word —Ñ–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω, —Å–∏–º–≤–æ–ª–æ–≤:', text.length);
            } else {
                console.log('‚ùå [FILE] –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç:', file.type);
                throw new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞');
            }
            
            console.log('üìù [FILE] –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ textarea...');
            if (this.textArea) {
                this.textArea.value = text;
                this.handleTextInput();
                console.log('‚úÖ [FILE] –¢–µ–∫—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ textarea');
            } else {
                console.log('‚ùå [FILE] textArea –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            }
            
            console.log('üìã [FILE] –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ...');
            this.showFileInfo(file.name, file.size);
            
            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É —Ç–µ–∫—Å—Ç–∞, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            console.log('üîÑ [FILE] –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É —Ç–µ–∫—Å—Ç–∞...');
            this.switchTab('text');
            
            console.log('‚úÖ [FILE] –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω');
            window.iceqBase.showToast(`–§–∞–π–ª "${file.name}" —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω`, 'success');
            
        } catch (error) {
            console.error('‚ùå [FILE] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', error);
            console.error('‚ùå [FILE] Stack trace:', error.stack);
            
            this.hideFileInfo();
            window.iceqBase.showToast('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ' + error.message, 'error');
        }
    }
    
    switchTab(tabName) {
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
        document.querySelectorAll('.tab-btn').forEach(btn => {
            btn.classList.toggle('active', btn.dataset.tab === tabName);
        });
        
        document.querySelectorAll('.tab-content').forEach(content => {
            content.classList.toggle('active', content.id === `${tabName}-input-tab`);
        });
        
        this.updateButtonsState();
    }
    
    decreaseQuestions() {
        const current = parseInt(this.questionsInput.value);
        if (current > 5) {
            const newValue = current - 1;
            this.questionsInput.value = newValue;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–∞–π–¥–µ—Ä
            const slider = document.getElementById('question-slider');
            if (slider) {
                slider.value = newValue;
            }
            
            this.validateQuestionsNumber();
        }
    }
    
    increaseQuestions() {
        const current = parseInt(this.questionsInput.value);
        if (current < this.maxQuestions) {
            const newValue = current + 1;
            this.questionsInput.value = newValue;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–∞–π–¥–µ—Ä
            const slider = document.getElementById('question-slider');
            if (slider) {
                slider.value = newValue;
            }
            
            this.validateQuestionsNumber();
        }
    }
    
    validateQuestionsNumber() {
        let value = parseInt(this.questionsInput.value);
        
        if (isNaN(value) || value < 5) {
            value = 5;
        } else if (value > this.maxQuestions) {
            value = this.maxQuestions;
        }
        
        this.questionsInput.value = value;
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ —Å–ª–∞–π–¥–µ—Ä–æ–º
        const slider = document.getElementById('question-slider');
        if (slider) {
            slider.value = value;
        }
        
        this.updateEstimatedTime();
        this.updateButtonsState();
    }
    
    updateEstimatedTime() {
        const questionsCount = parseInt(this.questionsInput.value) || 5;
        const minutes = Math.max(1, Math.ceil(questionsCount / 5));
        
        const estimateElement = document.getElementById('time-estimate');
        if (estimateElement) {
            estimateElement.textContent = `~ ${minutes}-${minutes + 1} –º–∏–Ω—É—Ç`;
        }
    }
    
    updateButtonsState() {
        console.log('üîÑ [BUTTONS] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫...');
        
        const hasText = this.textArea ? this.textArea.value.trim().length > 0 : false;
        const hasFile = this.fileInput && this.fileInput.files && this.fileInput.files.length > 0;
        const canGenerate = hasText || hasFile;
        
        console.log('üìä [BUTTONS] –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:', {
            hasText: hasText,
            textLength: this.textArea ? this.textArea.value.trim().length : 0,
            hasFile: hasFile,
            canGenerate: canGenerate,
            isGenerating: this.isGenerating
        });
        
        if (this.generateBtn) {
            const shouldDisable = !canGenerate || this.isGenerating;
            this.generateBtn.disabled = shouldDisable;
            console.log('üéØ [BUTTONS] –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', {
                disabled: shouldDisable,
                canGenerate: canGenerate,
                isGenerating: this.isGenerating
            });
        } else {
            console.log('‚ö†Ô∏è [BUTTONS] –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
        
        if (this.estimationPanel) {
            if (canGenerate) {
                this.estimationPanel.style.display = 'block';
                console.log('‚úÖ [BUTTONS] –ü–∞–Ω–µ–ª—å –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–∫–∞–∑–∞–Ω–∞');
            } else {
                this.estimationPanel.style.display = 'none';
                console.log('‚ùå [BUTTONS] –ü–∞–Ω–µ–ª—å –≤—Ä–µ–º–µ–Ω–∏ —Å–∫—Ä—ã—Ç–∞');
            }
        } else {
            console.log('‚ö†Ô∏è [BUTTONS] –ü–∞–Ω–µ–ª—å –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
        
        console.log('‚úÖ [BUTTONS] –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
    }
    
    async startGeneration() {
        console.log('[GENERATION] Starting test generation');
        
        if (this.isGenerating) {
            console.log('[GENERATION] Generation already in progress');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç
        const text = this.textArea.value.trim();
        console.log('[GENERATION] Text validation - length:', text.length);
        
        if (!text) {
            console.log('[GENERATION] No text provided for generation');
            window.iceqBase.showToast('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞', 'warning');
            return;
        }

        this.isGenerating = true;
        this.updateButtonsState();
        
        try {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —ç–∫—Ä–∞–Ω
            if (this.loadingOverlay) {
                this.loadingOverlay.style.display = 'flex';
            } else {
                console.warn('[GENERATION] Loading overlay not found');
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            let fileSize = 0;
            let textType = 'text';
            
            if (this.fileInput && this.fileInput.files && this.fileInput.files.length > 0) {
                const file = this.fileInput.files[0];
                fileSize = file.size;
                const fileName = file.name.toLowerCase();
                
                if (fileName.endsWith('.pdf')) {
                    textType = 'pdf';
                } else if (fileName.endsWith('.docx')) {
                    textType = 'docx';
                } else if (fileName.endsWith('.txt')) {
                    textType = 'txt';
                } else {
                    textType = 'file';
                }
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            const settings = {
                text: text,
                questionNumber: parseInt(this.questionsInput.value) || 10,
                model: this.selectedModel || 'iceq',
                fileSize: fileSize,
                textType: textType
            };
            
            console.log('[GENERATION] Settings:', settings);
            
            window.iceqBase.showToast('–ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ—Å—Ç–∞...', 'info');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º API
            if (!window.iceqBase || !window.iceqBase.fetchAPI) {
                throw new Error('API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            console.log('[GENERATION] Sending API request');
            const response = await window.iceqBase.fetchAPI('/generate', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(settings)
            });
            
            console.log('[GENERATION] API response received:', response.status);
            
            if (response.status === 'success') {
                console.log('[GENERATION] Test created successfully');
                console.log('[GENERATION] Questions generated:', response.questions.length);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç –≤ localStorage –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
                const testData = {
                    questions: response.questions,
                    settings: settings,
                    createdAt: new Date().toISOString(),
                    id: Date.now().toString()
                };
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                localStorage.setItem('iceq_generated_test', JSON.stringify(testData));
                // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∏—Ç –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç —Å—Ä–∞–∑—É)
                localStorage.setItem('iceq_current_test', JSON.stringify(testData));
                console.log('[GENERATION] Test data saved to localStorage');
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–µ—Å—Ç–æ–≤
                this.decrementTestLimit();
                
                window.iceqBase.showToast('–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É...', 'success');
                
                // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É —Ç–µ—Å—Ç–∞
                console.log('[GENERATION] Redirecting to preview');
                window.location.href = '/preview';
            } else {
                throw new Error(response.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
            }

        } catch (error) {
            console.error('[GENERATION] Generation error:', error.message);
            window.iceqBase.showToast(error.message || '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞', 'error');
        } finally {
            console.log('[GENERATION] Generation process finished');
            this.isGenerating = false;
            this.updateButtonsState();
            
            if (this.loadingOverlay) {
                this.loadingOverlay.style.display = 'none';
            }
        }
    }
    
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –∏–∑ –∫–æ–Ω—Å–æ–ª–∏)
    togglePremium() {
        this.isPremium = !this.isPremium;
        console.log('Premium status toggled to:', this.isPremium);
        this.updateUI();
        
        // –¢–∏—Ö–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        setTimeout(() => {
            window.location.reload();
        }, 500);
        
        return this.isPremium;
    }
    
    setPremium(status) {
        const oldStatus = this.isPremium;
        this.isPremium = !!status;
        console.log('Premium status set to:', this.isPremium);
        this.updateUI();
        
        // –¢–∏—Ö–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è
        if (oldStatus !== this.isPremium) {
            setTimeout(() => {
                window.location.reload();
            }, 500);
        }
        
        return this.isPremium;
    }



    /**
     * –£–º–µ–Ω—å—à–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ç–µ—Å—Ç–æ–≤
     */
    decrementTestLimit() {
        try {
            const defaultStats = {
                testsCreated: 0,
                questionsGenerated: 0,
                testsRemaining: this.isPremium ? 50 : 5,
                isPremium: this.isPremium
            };

            const saved = localStorage.getItem('iceq_user_stats');
            const stats = saved ? { ...defaultStats, ...JSON.parse(saved) } : defaultStats;
            
            // –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–µ—Å—Ç–æ–≤
            if (stats.testsRemaining > 0) {
                stats.testsRemaining--;
            }
            
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
            stats.testsCreated = (stats.testsCreated || 0) + 1;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–º–∏—É–º–∞
            stats.isPremium = this.isPremium;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            localStorage.setItem('iceq_user_stats', JSON.stringify(stats));
            
            console.log('üìä [STATS] –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', stats);
        } catch (error) {
            console.error('‚ùå [STATS] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
window.addEventListener('DOMContentLoaded', () => {
    console.log('üåü [GLOBAL] DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...');
    
    try {
        console.log('üèóÔ∏è [GLOBAL] –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ CreateTestPage...');
        window.createTestPage = new CreateTestPage();
        console.log('‚úÖ [GLOBAL] CreateTestPage —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
        
        // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –∏–∑ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞)
        console.log('üîß [GLOBAL] –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');
        window.togglePremium = () => window.createTestPage.togglePremium();
        window.setPremium = (status) => window.createTestPage.setPremium(status);
        
        console.log('üéØ [GLOBAL] –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏:');
        console.log('  togglePremium() - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–º–∏—É–º–∞');
        console.log('  setPremium(true/false) - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–º–∏—É–º–∞');
        
        console.log('üéâ [GLOBAL] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
        
    } catch (error) {
        console.error('üí• [GLOBAL] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        console.error('üí• [GLOBAL] Stack trace:', error.stack);
    }
}); 