/**
 * ICEQ (2025) - –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–∞
 */

class EditTestPage {
    constructor() {
        this.testData = null;
        this.originalTestData = null;
        this.isPremium = false;
        this.hasUnsavedChanges = false;
        this.questionErrors = {};
        
        this.init();
    }
    
    init() {
        console.log('[EDIT] Initializing edit page');
        
        this.initElements();
        this.checkPremiumStatus();
        this.loadTestData();
        this.initEventListeners();
        this.setupBeforeUnloadWarning();
        
        console.log('[EDIT] Edit page initialized');
    }
    
    initElements() {
        // –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ—Å—Ç–µ
        this.questionsCountEl = document.getElementById('questions-count');
        this.usedModelEl = document.getElementById('used-model');
        this.saveStatusEl = document.getElementById('save-status');
        
        // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        this.saveTestBtn = document.getElementById('save-test-btn');
        this.previewTestBtn = document.getElementById('preview-test-btn');
        this.startTestBtn = document.getElementById('start-test-btn');
        this.addQuestionBtn = document.getElementById('add-question-btn');
        this.importQuestionBtn = document.getElementById('import-question-btn');
        
        // –ö–Ω–æ–ø–∫–∏ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        this.expandAllBtn = document.getElementById('expand-all-btn');
        this.collapseAllBtn = document.getElementById('collapse-all-btn');
        this.validateAllBtn = document.getElementById('validate-all-btn');
        this.autoFixBtn = document.getElementById('auto-fix-btn');
        
        // –û–±–ª–∞—Å—Ç–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        this.questionsEditList = document.getElementById('questions-edit-list');
        
        // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        this.confirmModal = document.getElementById('confirm-modal');
        this.modalTitle = document.getElementById('modal-title');
        this.modalMessage = document.getElementById('modal-message');
        this.modalClose = document.getElementById('modal-close');
        this.modalCancel = document.getElementById('modal-cancel');
        this.modalConfirm = document.getElementById('modal-confirm');
        
        // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        this.loadingIndicator = document.getElementById('loading-indicator');
    }
    
    async checkPremiumStatus() {
        try {
            const response = await fetch('/api/premium_status', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            
            if (response.ok) {
                const data = await response.json();
                this.isPremium = data.premium_active || false;
            } else {
                this.isPremium = false;
            }
        } catch (error) {
            console.error('[EDIT] Premium status check error:', error);
            this.isPremium = false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
        if (!this.isPremium) {
            this.showAccessDenied();
            return;
        }
    }
    
    showAccessDenied() {
        const container = document.querySelector('.edit-container');
        container.innerHTML = `
            <div class="access-denied-container" style="text-align: center; padding: 60px 20px;">
                <div style="font-size: 64px; margin-bottom: 20px;">üîí</div>
                <h2 style="color: #1e293b; margin-bottom: 16px;">–ü—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏—è</h2>
                <p style="color: #64748b; margin-bottom: 32px; max-width: 400px; margin-left: auto; margin-right: auto;">
                    –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–æ–π.
                </p>
                <div style="display: flex; gap: 12px; justify-content: center; flex-wrap: wrap;">
                    <button class="btn action-btn" onclick="window.location.href='/preview'">
                        <span class="btn-icon">üëÅÔ∏è</span>
                        <span class="btn-text">–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É</span>
                    </button>
                    <button class="btn tertiary-btn" onclick="window.location.href='/create'">
                        <span class="btn-icon">‚ú®</span>
                        <span class="btn-text">–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–µ—Å—Ç</span>
                    </button>
                </div>
            </div>
        `;
    }
    
    loadTestData() {
        console.log('[EDIT] Loading test data');
        
        try {
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            let savedData = localStorage.getItem('iceq_test_for_edit');
            if (!savedData) {
                // –ï—Å–ª–∏ –Ω–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –±–µ—Ä–µ–º –æ–±—â–∏–µ
                savedData = localStorage.getItem('iceq_generated_test');
            }
            
            if (!savedData) {
                console.error('[EDIT] No test data found');
                this.showError('–î–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', '–í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ —Å–æ–∑–¥–∞–Ω–∏—é —Ç–µ—Å—Ç–∞');
                return;
            }
            
            this.testData = JSON.parse(savedData);
            this.originalTestData = JSON.parse(JSON.stringify(this.testData)); // Deep copy
            console.log('[EDIT] Test data loaded, questions:', this.testData.questions.length);
            
            this.fillTestInfo();
            this.renderQuestions();
            this.updateSaveStatus(false);
            
        } catch (error) {
            console.error('[EDIT] Data loading error:', error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö', '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ');
        }
    }
    
    fillTestInfo() {
        if (!this.testData || !this.testData.questions) {
            console.error('[EDIT] Invalid test data');
            return;
        }
        
        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
        if (this.questionsCountEl) {
            this.questionsCountEl.textContent = this.testData.questions.length;
        }
        
        // –ú–æ–¥–µ–ª—å
        if (this.usedModelEl && this.testData.settings) {
            const modelNames = {
                'deepseek': 'DeepSeek',
                'qwen': 'Qwen',
                'iceq': 'ICEQ'
            };
            this.usedModelEl.textContent = modelNames[this.testData.settings.model] || this.testData.settings.model;
        }
    }
    
    initEventListeners() {
        // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        if (this.saveTestBtn) {
            this.saveTestBtn.addEventListener('click', () => this.saveTestAndReturn());
        }
        
        if (this.previewTestBtn) {
            this.previewTestBtn.addEventListener('click', () => this.goToPreview());
        }
        
        if (this.addQuestionBtn) {
            this.addQuestionBtn.addEventListener('click', () => this.addNewQuestion());
        }
        
        if (this.importQuestionBtn) {
            this.importQuestionBtn.addEventListener('click', () => this.importQuestions());
        }
        
        // –ö–Ω–æ–ø–∫–∏ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        if (this.expandAllBtn) {
            this.expandAllBtn.addEventListener('click', () => this.expandAllQuestions());
        }
        
        if (this.collapseAllBtn) {
            this.collapseAllBtn.addEventListener('click', () => this.collapseAllQuestions());
        }
        
        // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        if (this.modalClose) {
            this.modalClose.addEventListener('click', () => this.hideModal());
        }
        
        if (this.modalCancel) {
            this.modalCancel.addEventListener('click', () => this.hideModal());
        }
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –µ–≥–æ
        if (this.confirmModal) {
            this.confirmModal.addEventListener('click', (e) => {
                if (e.target === this.confirmModal) {
                    this.hideModal();
                }
            });
        }
    }
    
    setupBeforeUnloadWarning() {
        window.addEventListener('beforeunload', (e) => {
            if (this.hasUnsavedChanges) {
                e.preventDefault();
                e.returnValue = '–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É?';
                return e.returnValue;
            }
        });
    }
    
    renderQuestions() {
        if (!this.testData || !this.testData.questions) {
            console.error('[EDIT] No questions data to render');
            return;
        }
        
        this.questionsEditList.innerHTML = '';
        
        this.testData.questions.forEach((question, index) => {
            const questionElement = this.createQuestionEditElement(question, index);
            this.questionsEditList.appendChild(questionElement);
        });
        
        console.log('[EDIT] Rendered', this.testData.questions.length, 'questions');
    }
    
    createQuestionEditElement(question, index) {
        const questionDiv = document.createElement('div');
        questionDiv.className = 'question-edit-item';
        questionDiv.dataset.questionIndex = index;
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
        const header = document.createElement('div');
        header.className = 'question-header';
        header.onclick = () => this.toggleQuestion(index);
        
        const questionNumber = document.createElement('div');
        questionNumber.className = 'question-number';
        questionNumber.textContent = `–í–æ–ø—Ä–æ—Å ${index + 1}`;
        
        const controls = document.createElement('div');
        controls.className = 'question-controls';
        
        const expandIcon = document.createElement('span');
        expandIcon.className = 'expand-icon';
        expandIcon.innerHTML = '‚ñº';
        
        const deleteBtn = document.createElement('button');
        deleteBtn.className = 'control-btn delete';
        deleteBtn.innerHTML = 'üóëÔ∏è';
        deleteBtn.title = '–£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å';
        deleteBtn.onclick = (e) => {
            e.stopPropagation();
            this.deleteQuestion(index);
        };
        
        const duplicateBtn = document.createElement('button');
        duplicateBtn.className = 'control-btn';
        duplicateBtn.innerHTML = 'üìã';
        duplicateBtn.title = '–î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å';
        duplicateBtn.onclick = (e) => {
            e.stopPropagation();
            this.duplicateQuestion(index);
        };
        
        controls.appendChild(duplicateBtn);
        controls.appendChild(deleteBtn);
        controls.appendChild(expandIcon);
        
        header.appendChild(questionNumber);
        header.appendChild(controls);
        
        // –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const content = document.createElement('div');
        content.className = 'question-content';
        
        // –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        const errorsDiv = document.createElement('div');
        errorsDiv.className = 'question-errors';
        errorsDiv.style.display = 'none';
        content.appendChild(errorsDiv);
        
        // –ü–æ–ª–µ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞
        const questionField = document.createElement('div');
        questionField.className = 'edit-field question-text-field';
        
        const questionLabel = document.createElement('label');
        questionLabel.textContent = '–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞';
        
        const questionTextarea = document.createElement('textarea');
        questionTextarea.value = question.question || '';
        questionTextarea.placeholder = '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞...';
        questionTextarea.addEventListener('input', () => {
            this.updateQuestion(index, 'question', questionTextarea.value);
        });
        
        questionField.appendChild(questionLabel);
        questionField.appendChild(questionTextarea);
        content.appendChild(questionField);
        
        // –ü–æ–ª–µ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
        const answersField = document.createElement('div');
        answersField.className = 'answers-edit';
        
        const answersLabel = document.createElement('label');
        answersLabel.textContent = '–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤';
        answersField.appendChild(answersLabel);
        
        const answersContainer = document.createElement('div');
        answersContainer.className = 'answers-container';
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ—Ç–≤–µ—Ç—ã
        question.answers.forEach((answer, answerIndex) => {
            const answerElement = this.createAnswerEditElement(answer, index, answerIndex);
            answersContainer.appendChild(answerElement);
        });
        
        // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
        const addAnswerBtn = document.createElement('button');
        addAnswerBtn.className = 'add-answer-btn';
        addAnswerBtn.innerHTML = '‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞';
        addAnswerBtn.onclick = () => this.addAnswer(index);
        
        answersField.appendChild(answersContainer);
        answersField.appendChild(addAnswerBtn);
        content.appendChild(answersField);
        
        // –ü–æ–ª–µ –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
        const explanationField = document.createElement('div');
        explanationField.className = 'edit-field explanation-field';
        
        const explanationLabel = document.createElement('label');
        explanationLabel.textContent = '–û–±—ä—è—Å–Ω–µ–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)';
        
        const explanationTextarea = document.createElement('textarea');
        explanationTextarea.value = question.explanation || '';
        explanationTextarea.placeholder = '–î–æ–±–∞–≤—å—Ç–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞...';
        explanationTextarea.addEventListener('input', () => {
            this.updateQuestion(index, 'explanation', explanationTextarea.value);
        });
        
        explanationField.appendChild(explanationLabel);
        explanationField.appendChild(explanationTextarea);
        content.appendChild(explanationField);
        
        questionDiv.appendChild(header);
        questionDiv.appendChild(content);
        
        return questionDiv;
    }
    
    createAnswerEditElement(answer, questionIndex, answerIndex) {
        const answerDiv = document.createElement('div');
        answerDiv.className = 'answer-item';
        answerDiv.dataset.answerIndex = answerIndex;
        
        if (answer.correct || answer.is_correct) {
            answerDiv.classList.add('correct');
        }
        
        // –ú–∞—Ä–∫–µ—Ä –æ—Ç–≤–µ—Ç–∞
        const marker = document.createElement('div');
        marker.className = 'answer-marker';
        marker.textContent = String.fromCharCode(65 + answerIndex); // A, B, C, D
        
        // –ü–æ–ª–µ –≤–≤–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞
        const input = document.createElement('input');
        input.className = 'answer-input';
        input.type = 'text';
        input.value = answer.text || answer.answer || '';
        input.placeholder = `–í–∞—Ä–∏–∞–Ω—Ç ${marker.textContent}`;
        input.addEventListener('input', () => {
            this.updateAnswer(questionIndex, answerIndex, 'text', input.value);
        });
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏
        const correctToggle = document.createElement('button');
        correctToggle.className = 'correct-toggle';
        correctToggle.type = 'button';
        if (answer.correct || answer.is_correct) {
            correctToggle.classList.add('active');
        }
        correctToggle.onclick = () => {
            this.toggleCorrectAnswer(questionIndex, answerIndex);
        };
        
        // –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
        const deleteBtn = document.createElement('button');
        deleteBtn.className = 'answer-delete';
        deleteBtn.innerHTML = 'üóëÔ∏è';
        deleteBtn.title = '–£–¥–∞–ª–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç';
        deleteBtn.onclick = () => {
            this.deleteAnswer(questionIndex, answerIndex);
        };
        
        answerDiv.appendChild(marker);
        answerDiv.appendChild(input);
        answerDiv.appendChild(correctToggle);
        answerDiv.appendChild(deleteBtn);
        
        return answerDiv;
    }
    
    // –ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞–º–∏
    toggleQuestion(index) {
        const questionElement = this.questionsEditList.children[index];
        questionElement.classList.toggle('expanded');
    }
    
    expandAllQuestions() {
        const questions = this.questionsEditList.querySelectorAll('.question-edit-item');
        questions.forEach(q => q.classList.add('expanded'));
    }
    
    collapseAllQuestions() {
        const questions = this.questionsEditList.querySelectorAll('.question-edit-item');
        questions.forEach(q => q.classList.remove('expanded'));
    }
    
    addNewQuestion() {
        const newQuestion = {
            question: '',
            answers: [
                { text: '', correct: true },
                { text: '', correct: false },
                { text: '', correct: false },
                { text: '', correct: false }
            ],
            explanation: ''
        };
        
        this.testData.questions.push(newQuestion);
        this.markAsUnsaved();
        this.updateQuestionCount();
        this.renderQuestions();
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏ —Å–∫—Ä–æ–ª–ª–∏–º –∫ –Ω–µ–º—É
        const newIndex = this.testData.questions.length - 1;
        setTimeout(() => {
            this.toggleQuestion(newIndex);
            const questionElement = this.questionsEditList.children[newIndex];
            questionElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }, 100);
        
        if (window.iceqBase) {
            window.iceqBase.showToast('–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω', 'success');
        }
    }
    
    deleteQuestion(index) {
        this.showModal(
            '–£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å?',
            `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å ${index + 1}? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`,
            () => {
                this.testData.questions.splice(index, 1);
                this.markAsUnsaved();
                this.updateQuestionCount();
                this.renderQuestions();
                
                if (window.iceqBase) {
                    window.iceqBase.showToast('–í–æ–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω', 'info');
                }
            }
        );
    }
    
    duplicateQuestion(index) {
        const originalQuestion = this.testData.questions[index];
        const duplicatedQuestion = JSON.parse(JSON.stringify(originalQuestion));
        
        this.testData.questions.splice(index + 1, 0, duplicatedQuestion);
        this.markAsUnsaved();
        this.updateQuestionCount();
        this.renderQuestions();
        
        if (window.iceqBase) {
            window.iceqBase.showToast('–í–æ–ø—Ä–æ—Å –ø—Ä–æ–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω', 'success');
        }
    }
    
    updateQuestion(index, field, value) {
        this.testData.questions[index][field] = value;
        this.markAsUnsaved();
        
        // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        if (this.questionErrors[index]) {
            delete this.questionErrors[index];
            this.updateQuestionErrorDisplay(index);
        }
    }
    
    // –ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞–º–∏
    addAnswer(questionIndex) {
        const question = this.testData.questions[questionIndex];
        if (question.answers.length >= 6) {
            if (window.iceqBase) {
                window.iceqBase.showToast('–ú–∞–∫—Å–∏–º—É–º 6 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞', 'warning');
            }
            return;
        }
        
        question.answers.push({
            text: '',
            correct: false
        });
        
        this.markAsUnsaved();
        this.renderQuestions();
        
        // –†–∞—Å–∫—Ä—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–≤–µ—Ä–Ω—É—Ç
        const questionElement = this.questionsEditList.children[questionIndex];
        if (!questionElement.classList.contains('expanded')) {
            questionElement.classList.add('expanded');
        }
    }
    
    deleteAnswer(questionIndex, answerIndex) {
        const question = this.testData.questions[questionIndex];
        
        if (question.answers.length <= 2) {
            if (window.iceqBase) {
                window.iceqBase.showToast('–ú–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞', 'warning');
            }
            return;
        }
        
        question.answers.splice(answerIndex, 1);
        this.markAsUnsaved();
        this.renderQuestions();
    }
    
    updateAnswer(questionIndex, answerIndex, field, value) {
        this.testData.questions[questionIndex].answers[answerIndex][field] = value;
        this.markAsUnsaved();
    }
    
    toggleCorrectAnswer(questionIndex, answerIndex) {
        const question = this.testData.questions[questionIndex];
        const answer = question.answers[answerIndex];
        
        // –ï—Å–ª–∏ –¥–µ–ª–∞–µ–º –æ—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º, —Å–Ω–∞—á–∞–ª–∞ –¥–µ–ª–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏
        if (!answer.correct && !answer.is_correct) {
            question.answers.forEach(a => {
                a.correct = false;
                a.is_correct = false;
            });
        }
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –æ—Ç–≤–µ—Ç
        answer.correct = !answer.correct;
        answer.is_correct = answer.correct;
        
        this.markAsUnsaved();
        this.renderQuestions();
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    validateAllQuestions() {
        console.log('üîç [EDIT] –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤...');
        
        this.questionErrors = {};
        let hasErrors = false;
        
        this.testData.questions.forEach((question, index) => {
            const errors = this.validateQuestion(question, index);
            if (errors.length > 0) {
                this.questionErrors[index] = errors;
                hasErrors = true;
            }
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–æ–∫
        this.updateAllQuestionErrorDisplays();
        
        if (hasErrors) {
            if (window.iceqBase) {
                window.iceqBase.showToast('–ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –≤–æ–ø—Ä–æ—Å–∞—Ö', 'error');
            }
        } else {
            if (window.iceqBase) {
                window.iceqBase.showToast('–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã', 'success');
            }
        }
        
        console.log('‚úÖ [EDIT] –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        return !hasErrors;
    }
    
    validateQuestion(question, index) {
        const errors = [];
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞
        if (!question.question || question.question.trim().length < 10) {
            errors.push('–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤');
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
        if (!question.answers || question.answers.length < 2) {
            errors.push('–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞');
        } else {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã
            const emptyAnswers = question.answers.filter(a => !a.text || a.text.trim().length === 0);
            if (emptyAnswers.length > 0) {
                errors.push('–í—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã');
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            const correctAnswers = question.answers.filter(a => a.correct || a.is_correct);
            if (correctAnswers.length === 0) {
                errors.push('–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç');
            } else if (correctAnswers.length > 1) {
                errors.push('–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç');
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –æ—Ç–≤–µ—Ç—ã
            const answerTexts = question.answers.map(a => a.text.trim().toLowerCase());
            const uniqueTexts = [...new Set(answerTexts)];
            if (answerTexts.length !== uniqueTexts.length) {
                errors.push('–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –Ω–µ –¥–æ–ª–∂–Ω—ã –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å—Å—è');
            }
        }
        
        return errors;
    }
    
    updateAllQuestionErrorDisplays() {
        this.testData.questions.forEach((_, index) => {
            this.updateQuestionErrorDisplay(index);
        });
    }
    
    updateQuestionErrorDisplay(index) {
        const questionElement = this.questionsEditList.children[index];
        if (!questionElement) return;
        
        const errorsDiv = questionElement.querySelector('.question-errors');
        const errors = this.questionErrors[index];
        
        if (errors && errors.length > 0) {
            questionElement.classList.add('has-errors');
            errorsDiv.style.display = 'block';
            errorsDiv.innerHTML = `
                <h4>–û—à–∏–±–∫–∏ –≤ –≤–æ–ø—Ä–æ—Å–µ:</h4>
                <ul>
                    ${errors.map(error => `<li>${error}</li>`).join('')}
                </ul>
            `;
        } else {
            questionElement.classList.remove('has-errors');
            errorsDiv.style.display = 'none';
        }
    }
    
    autoFixQuestions() {
        console.log('üîß [EDIT] –ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤...');
        
        let fixedCount = 0;
        
        this.testData.questions.forEach((question, index) => {
            let wasFixed = false;
            
            // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            const correctAnswers = question.answers.filter(a => a.correct || a.is_correct);
            if (correctAnswers.length === 0 && question.answers.length > 0) {
                question.answers[0].correct = true;
                question.answers[0].is_correct = true;
                wasFixed = true;
            }
            
            // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
            if (correctAnswers.length > 1) {
                question.answers.forEach((a, i) => {
                    a.correct = i === 0 && (a.correct || a.is_correct);
                    a.is_correct = a.correct;
                });
                wasFixed = true;
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –æ—Ç–≤–µ—Ç—ã
            while (question.answers.length < 2) {
                question.answers.push({
                    text: `–í–∞—Ä–∏–∞–Ω—Ç ${question.answers.length + 1}`,
                    correct: false
                });
                wasFixed = true;
            }
            
            if (wasFixed) {
                fixedCount++;
            }
        });
        
        if (fixedCount > 0) {
            this.markAsUnsaved();
            this.renderQuestions();
            
            if (window.iceqBase) {
                window.iceqBase.showToast(`–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${fixedCount} –≤–æ–ø—Ä–æ—Å–æ–≤`, 'success');
            }
        } else {
            if (window.iceqBase) {
                window.iceqBase.showToast('–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è', 'info');
            }
        }
        
        console.log('‚úÖ [EDIT] –ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    }
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    saveTestAndReturn() {
        console.log('[EDIT] Saving test and returning to preview');
        
        // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        if (!this.testData || !this.testData.questions || this.testData.questions.length === 0) {
            if (window.iceqBase) {
                window.iceqBase.showToast('–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è', 'error');
            }
            return;
        }
        
        this.showLoading();
        
        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
            this.testData.modifiedAt = new Date().toISOString();
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
            localStorage.setItem('iceq_generated_test', JSON.stringify(this.testData));
            localStorage.setItem('iceq_current_test', JSON.stringify(this.testData));
            localStorage.setItem('iceq_test_for_edit', JSON.stringify(this.testData));
            
            if (window.iceqBase) {
                window.iceqBase.showToast('–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'success');
            }
            
            console.log('[EDIT] Test saved successfully');
            
            // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É
            setTimeout(() => {
                window.location.href = '/preview';
            }, 500);
            
        } catch (error) {
            console.error('[EDIT] Save error:', error);
            if (window.iceqBase) {
                window.iceqBase.showToast('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è', 'error');
            }
            this.hideLoading();
        }
    }
    
    goToPreview() {
        if (this.hasUnsavedChanges) {
            this.showModal(
                '–ù–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è',
                '–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É?',
                () => {
                    this.saveTest();
                    setTimeout(() => {
                        window.location.href = '/preview';
                    }, 500);
                },
                () => {
                    window.location.href = '/preview';
                }
            );
        } else {
            window.location.href = '/preview';
        }
    }
    
    startTest() {
        if (this.hasUnsavedChanges) {
            this.showModal(
                '–ù–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è',
                '–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Ç–µ—Å—Ç–∞?',
                () => {
                    this.saveTest();
                    setTimeout(() => {
                        window.location.href = '/take';
                    }, 500);
                },
                () => {
                    window.location.href = '/take';
                }
            );
        } else {
            window.location.href = '/take';
        }
    }
    
    importQuestions() {
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π input –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
        const input = document.createElement('input');
        input.type = 'file';
        input.accept = '.json';
        input.onchange = (e) => {
            const file = e.target.files[0];
            if (file) {
                this.handleImportFile(file);
            }
        };
        input.click();
    }
    
    async handleImportFile(file) {
        try {
            const text = await file.text();
            const importData = JSON.parse(text);
            
            if (importData.questions && Array.isArray(importData.questions)) {
                this.showModal(
                    '–ò–º–ø–æ—Ä—Ç –≤–æ–ø—Ä–æ—Å–æ–≤',
                    `–ù–∞–π–¥–µ–Ω–æ ${importData.questions.length} –≤–æ–ø—Ä–æ—Å–æ–≤. –î–æ–±–∞–≤–∏—Ç—å –∏—Ö –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º?`,
                    () => {
                        this.testData.questions = [...this.testData.questions, ...importData.questions];
                        this.markAsUnsaved();
                        this.updateQuestionCount();
                        this.renderQuestions();
                        
                        if (window.iceqBase) {
                            window.iceqBase.showToast(`–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${importData.questions.length} –≤–æ–ø—Ä–æ—Å–æ–≤`, 'success');
                        }
                    }
                );
            } else {
                throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞');
            }
        } catch (error) {
            console.error('‚ùå [EDIT] –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', error);
            if (window.iceqBase) {
                window.iceqBase.showToast('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ñ–∞–π–ª–∞', 'error');
            }
        }
    }
    
    // –°–ª—É–∂–µ–±–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    markAsUnsaved() {
        this.hasUnsavedChanges = true;
        this.updateSaveStatus(true);
    }
    
    updateSaveStatus(hasChanges) {
        this.hasUnsavedChanges = hasChanges;
        
        if (this.saveStatusEl) {
            if (hasChanges) {
                this.saveStatusEl.textContent = '–ù–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ';
                this.saveStatusEl.className = 'meta-value unsaved';
            } else {
                this.saveStatusEl.textContent = '–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ';
                this.saveStatusEl.className = 'meta-value saved';
            }
        }
        
        if (this.saveTestBtn) {
            this.saveTestBtn.disabled = !hasChanges;
        }
    }
    
    updateQuestionCount() {
        if (this.questionsCountEl) {
            this.questionsCountEl.textContent = this.testData.questions.length;
        }
    }
    
    showModal(title, message, onConfirm, onCancel = null) {
        if (this.modalTitle) this.modalTitle.textContent = title;
        if (this.modalMessage) this.modalMessage.textContent = message;
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        const newConfirmBtn = this.modalConfirm.cloneNode(true);
        this.modalConfirm.parentNode.replaceChild(newConfirmBtn, this.modalConfirm);
        this.modalConfirm = newConfirmBtn;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        this.modalConfirm.onclick = () => {
            this.hideModal();
            if (onConfirm) onConfirm();
        };
        
        if (onCancel) {
            this.modalCancel.onclick = () => {
                this.hideModal();
                onCancel();
            };
            this.modalCancel.style.display = 'inline-flex';
        } else {
            this.modalCancel.style.display = 'none';
        }
        
        if (this.confirmModal) {
            this.confirmModal.style.display = 'flex';
        }
    }
    
    hideModal() {
        if (this.confirmModal) {
            this.confirmModal.style.display = 'none';
        }
    }
    
    showLoading() {
        if (this.loadingIndicator) {
            this.loadingIndicator.style.display = 'flex';
        }
    }
    
    hideLoading() {
        if (this.loadingIndicator) {
            this.loadingIndicator.style.display = 'none';
        }
    }
    
    showError(title, message) {
        console.error('[EDIT] Error:', title, message);
        
        const container = document.querySelector('.edit-container');
        container.innerHTML = `
            <div class="error-container" style="text-align: center; padding: 60px 20px;">
                <div style="font-size: 64px; margin-bottom: 20px;">üòû</div>
                <h2 style="color: #1e293b; margin-bottom: 16px;">${title}</h2>
                <p style="color: #64748b; margin-bottom: 32px;">${message}</p>
                <div style="display: flex; gap: 12px; justify-content: center; flex-wrap: wrap;">
                    <button class="btn action-btn" onclick="window.location.href='/create'">
                        <span class="btn-icon">‚ú®</span>
                        <span class="btn-text">–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–µ—Å—Ç</span>
                    </button>
                    <button class="btn tertiary-btn" onclick="window.location.href='/preview'">
                        <span class="btn-icon">üëÅÔ∏è</span>
                        <span class="btn-text">–ö –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É</span>
                    </button>
                </div>
            </div>
        `;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', () => {
    console.log('Edit page initialized');
    new EditTestPage();
}); 