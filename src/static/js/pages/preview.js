/**
 * ICEQ (2025) - –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ—Å—Ç–∞
 */

class PreviewTestPage {
    constructor() {
        this.testData = null;
        this.isPreviewVisible = false;
        
        this.init();
    }
    
    init() {
        console.log('üèóÔ∏è [PREVIEW] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞...');
        
        this.initElements();
        this.loadTestData();
        this.initEventListeners();
        
        console.log('‚úÖ [PREVIEW] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }
    
    initElements() {
        // –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ—Å—Ç–µ
        this.questionsCountEl = document.getElementById('questions-count');
        this.usedModelEl = document.getElementById('used-model');
        this.creationTimeEl = document.getElementById('creation-time');
        
        // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        this.startTestBtn = document.getElementById('start-test-btn');
        this.togglePreviewBtn = document.getElementById('toggle-preview-btn');
        this.editTestBtn = document.getElementById('edit-test-btn');
        this.exportTestBtn = document.getElementById('export-test-btn');
        this.createNewBtn = document.getElementById('create-new-btn');
        
        // –≠–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        this.questionsPreview = document.getElementById('questions-preview');
        this.hidePreviewBtn = document.getElementById('hide-preview-btn');
        this.questionsList = document.getElementById('questions-list');
        this.collapseAllBtn = document.getElementById('collapse-all-btn');
        this.expandAllBtn = document.getElementById('expand-all-btn');
        

        
        // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        this.loadingIndicator = document.getElementById('loading-indicator');
    }
    
    loadTestData() {
        console.log('üìä [PREVIEW] –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞...');
        
        try {
            const savedData = localStorage.getItem('iceq_generated_test');
            if (!savedData) {
                console.error('‚ùå [PREVIEW] –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞');
                this.showError('–î–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', '–í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ —Å–æ–∑–¥–∞–Ω–∏—é —Ç–µ—Å—Ç–∞');
                return;
            }
            
            this.testData = JSON.parse(savedData);
            console.log('‚úÖ [PREVIEW] –î–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', this.testData);
            
            this.fillTestInfo();
            
        } catch (error) {
            console.error('‚ùå [PREVIEW] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö', '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ');
        }
    }
    
    fillTestInfo() {
        console.log('üìù [PREVIEW] –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ—Å—Ç–µ...');
        
        if (!this.testData || !this.testData.questions) {
            console.error('‚ùå [PREVIEW] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞');
            return;
        }
        
        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
        if (this.questionsCountEl) {
            this.questionsCountEl.textContent = this.testData.questions.length;
        }
        
        // –ú–æ–¥–µ–ª—å
        if (this.usedModelEl && this.testData.settings) {
            const modelNames = {
                'deepseek': 'DeepSeek',
                'qwen': 'Qwen',
                'iceq': 'ICEQ'
            };
            this.usedModelEl.textContent = modelNames[this.testData.settings.model] || this.testData.settings.model;
        }
        
        // –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
        if (this.creationTimeEl) {
            const createdAt = new Date(this.testData.createdAt);
            const now = new Date();
            const diffMinutes = Math.floor((now - createdAt) / (1000 * 60));
            
            if (diffMinutes < 1) {
                this.creationTimeEl.textContent = '–¢–æ–ª—å–∫–æ —á—Ç–æ';
            } else if (diffMinutes < 60) {
                this.creationTimeEl.textContent = `${diffMinutes} –º–∏–Ω –Ω–∞–∑–∞–¥`;
            } else {
                this.creationTimeEl.textContent = createdAt.toLocaleDateString();
            }
        }
        
        console.log('‚úÖ [PREVIEW] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Å—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞');
    }
    
    initEventListeners() {
        // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        if (this.startTestBtn) {
            this.startTestBtn.addEventListener('click', () => this.startTest());
        }
        
        if (this.togglePreviewBtn) {
            this.togglePreviewBtn.addEventListener('click', () => this.togglePreview());
        }
        
        if (this.editTestBtn) {
            this.editTestBtn.addEventListener('click', () => this.editTest());
        }
        
        if (this.exportTestBtn) {
            this.exportTestBtn.addEventListener('click', () => this.exportTest());
        }
        
        if (this.createNewBtn) {
            this.createNewBtn.addEventListener('click', () => this.createNewTest());
        }
        
        // –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
        if (this.hidePreviewBtn) {
            this.hidePreviewBtn.addEventListener('click', () => this.hidePreview());
        }
        
        if (this.collapseAllBtn) {
            this.collapseAllBtn.addEventListener('click', () => this.collapseAllQuestions());
        }
        
        if (this.expandAllBtn) {
            this.expandAllBtn.addEventListener('click', () => this.expandAllQuestions());
        }
        

    }
    
    togglePreview() {
        console.log('üëÅÔ∏è [PREVIEW] –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞...');
        
        if (this.isPreviewVisible) {
            this.hidePreview();
        } else {
            this.showPreview();
        }
    }
    
    showPreview() {
        console.log('üëÅÔ∏è [PREVIEW] –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤–æ–ø—Ä–æ—Å–æ–≤...');
        
        if (!this.testData || !this.testData.questions) {
            window.iceqBase.showToast('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞', 'error');
            return;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        this.showLoading();
        
        setTimeout(() => {
            try {
                // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
                this.questionsList.innerHTML = '';
                
                // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã
                this.testData.questions.forEach((question, index) => {
                    const questionEl = this.createQuestionElement(question, index + 1);
                    this.questionsList.appendChild(questionEl);
                });
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
                this.questionsPreview.style.display = 'block';
                this.isPreviewVisible = true;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
                this.togglePreviewBtn.querySelector('.btn-text').textContent = '–°–∫—Ä—ã—Ç—å –≤–æ–ø—Ä–æ—Å—ã';
                this.togglePreviewBtn.querySelector('.btn-icon').textContent = 'üôà';
                
                // –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É
                this.questionsPreview.scrollIntoView({ behavior: 'smooth' });
                
                this.hideLoading();
                console.log('‚úÖ [PREVIEW] –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–∫–∞–∑–∞–Ω');
                
            } catch (error) {
                console.error('‚ùå [PREVIEW] –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞:', error);
                this.hideLoading();
                window.iceqBase.showToast('–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤', 'error');
            }
        }, 500); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏
    }
    
    hidePreview() {
        console.log('üôà [PREVIEW] –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä...');
        
        this.questionsPreview.style.display = 'none';
        this.isPreviewVisible = false;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
        this.togglePreviewBtn.querySelector('.btn-text').textContent = '–ü–æ–∫–∞–∑–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã';
        this.togglePreviewBtn.querySelector('.btn-icon').textContent = 'üëÅÔ∏è';
    }
    
    createQuestionElement(question, index) {
        // –°–æ–∑–¥–∞–µ–º –≤ —Å—Ç–∏–ª–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ ICEQ
        const questionItem = document.createElement('div');
        questionItem.className = 'question-item';

        const heading = document.createElement('h4');
        heading.textContent = `–í–æ–ø—Ä–æ—Å ${index}`;
        questionItem.appendChild(heading);

        const questionContent = document.createElement('div');
        questionContent.className = 'question-content';
        questionContent.textContent = question.question;
        questionItem.appendChild(questionContent);

        const answersList = document.createElement('ul');
        answersList.className = 'answers-list';

        question.answers.forEach(answer => {
            const answerItem = document.createElement('li');
            answerItem.className = `answer-item ${answer.is_correct ? 'correct-answer' : ''}`;

            const answerMarker = document.createElement('span');
            answerMarker.className = `answer-marker ${answer.is_correct ? 'correct-marker' : ''}`;
            answerMarker.textContent = answer.is_correct ? '‚úì' : '';
            answerItem.appendChild(answerMarker);

            const answerText = document.createElement('span');
            answerText.textContent = answer.answer;
            answerItem.appendChild(answerText);

            answersList.appendChild(answerItem);
        });
        questionItem.appendChild(answersList);

        if (question.explanation) {
            const explanation = document.createElement('div');
            explanation.className = 'explanation';
            explanation.textContent = `–û–±—ä—è—Å–Ω–µ–Ω–∏–µ: ${question.explanation}`;
            questionItem.appendChild(explanation);
        }

        return questionItem;
    }
    
    collapseAllQuestions() {
        document.querySelectorAll('.question-item').forEach(item => {
            item.classList.remove('expanded');
        });
    }
    
    expandAllQuestions() {
        document.querySelectorAll('.question-item').forEach(item => {
            item.classList.add('expanded');
        });
    }
    
    startTest() {
        console.log('üöÄ [PREVIEW] –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞...');
        
        if (!this.testData) {
            window.iceqBase.showToast('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è', 'error');
            return;
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
        localStorage.setItem('iceq_test_to_take', JSON.stringify(this.testData));
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
        window.location.href = '/take';
    }
    
    editTest() {
        console.log('‚úèÔ∏è [PREVIEW] –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Ç–µ—Å—Ç–∞...');
        
        // –§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞
        window.iceqBase.showToast('–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', 'info');
    }
    

    
    exportTest() {
        console.log('üíæ [PREVIEW] –≠–∫—Å–ø–æ—Ä—Ç —Ç–µ—Å—Ç–∞ –≤ JSON...');
        
        if (!this.testData) {
            window.iceqBase.showToast('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞', 'error');
            return;
        }
        
        // –°–æ–∑–¥–∞–µ–º JSON –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
        const testDataToExport = {
            title: 'ICEQ –¢–µ—Å—Ç',
            dateCreated: new Date().toISOString(),
            questions: this.testData.questions
        };

        const json = JSON.stringify(testDataToExport, null, 2);
        const blob = new Blob([json], {type: 'application/json'});
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `ICEQ-Test_${new Date().toISOString().split('T')[0]}.json`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
        
        window.iceqBase.showToast('–¢–µ—Å—Ç —Å–∫–∞—á–∞–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON!', 'success');
    }
    
    createNewTest() {
        console.log('‚ú® [PREVIEW] –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞...');
        
        // –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        localStorage.removeItem('iceq_generated_test');
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ–∑–¥–∞–Ω–∏—è
        window.location.href = '/create';
    }
    
    showError(title, message) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤–º–µ—Å—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        document.querySelector('.preview-container').innerHTML = `
            <div class="error-container">
                <div class="error-icon">‚ùå</div>
                <h2>${title}</h2>
                <p>${message}</p>
                <a href="/create" class="btn primary-btn">
                    <span class="btn-icon">‚ú®</span>
                    <span class="btn-text">–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç</span>
                </a>
            </div>
        `;
    }
    
    showLoading() {
        if (this.loadingIndicator) {
            this.loadingIndicator.style.display = 'flex';
        }
    }
    
    hideLoading() {
        if (this.loadingIndicator) {
            this.loadingIndicator.style.display = 'none';
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
window.addEventListener('DOMContentLoaded', () => {
    console.log('üåü [GLOBAL] DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞...');
    
    try {
        window.previewTestPage = new PreviewTestPage();
        console.log('üéâ [GLOBAL] –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
        
    } catch (error) {
        console.error('üí• [GLOBAL] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        console.error('üí• [GLOBAL] Stack trace:', error.stack);
    }
});
